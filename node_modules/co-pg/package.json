{
  "name": "co-pg",
  "version": "1.3.1",
  "description": "Co wrapper for node-postgres",
  "repository": {
    "type": "git",
    "url": "https://github.com/basicdays/co-pg.git"
  },
  "scripts": {
    "test": "make test"
  },
  "main": "./lib",
  "keywords": [
    "async",
    "generator",
    "coroutine",
    "co",
    "postgresql",
    "postgres",
    "pg"
  ],
  "author": {
    "name": "basicdays",
    "email": "info@basicdays.com",
    "url": "http://basicdays.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/basicdays/co-pg/issues"
  },
  "homepage": "https://github.com/basicdays/co-pg",
  "dependencies": {
    "promissory": "^1.0.0",
    "thunkify": "^2.1.2"
  },
  "devDependencies": {
    "pg": "^3.6.3",
    "pg.js": "^3.6.2",
    "mocha": "^2.0.1",
    "chai": "^1.10.0",
    "jshint": "^2.5.10",
    "co": "^4.0.0",
    "co-fs": "^1.2.0",
    "commander": "^2.5.0"
  },
  "readme": "# co-pg\n\n[Co](https://github.com/visionmedia/co) wrapper for [node-postgres](https://github.com/brianc/node-postgres)\n\n## Installation\n\n```\n$ npm install co-pg\n```\n\n## Overview\n\n`co-pg` works by directly inheriting from the prototypes within the `pg` package. Everything that is available\nfrom `pg` is also available on `co-pg` with no alterations to the original API. The `pg` API methods that use a\ncallback style interface also have companion promise methods that are usable by `co` 4.0.\n\nFormer \"thunk\" methods are still supported in 1.0 and are usable by all versions of co. However they have been\ndeprecated.\n\nSupports [node-postgres](https://github.com/brianc/node-postgres) both js and native,\nas well as [node-postgres-pure](https://github.com/brianc/node-postgres-pure).\n\n## API Additions\n\n`co-pg` adds a few additional methods on top of the `pg` API.\n\n - `PG` prototype adds the `#connectPromise` method\n - `Client` prototype adds the `#connectPromise` and `#queryPromise` methods\n - `PG` prototype adds the `#connect_` thunk method (deprecated)\n - `Client` prototype adds the `#connect_` and `#query_` thunk methods (deprecated)\n\nThese methods behave exactly the same as their counter-parts, including their arguments, except instead of\nsupplying a callback, the promise is yielded. All the original methods are still available by using the\nsans-underscore methods.\n\n## Examples\n\n### Single connection\n\nConnect to a postgres instance, run a query, and disconnect, using `co`.\n\n```js\nvar co = require('co'),\n    pg = require('co-pg')(require('pg'));\n\nvar connectionString = 'postgres://postgres:1234@localhost/postgres';\n\nco(function* connectExample() {\n\ttry {\n\t\tvar client = new pg.Client(connectionString);\n\t\tyield client.connectPromise();\n\n\t\tvar result = yield client.queryPromise('select now() as \"theTime\"');\n\t\tconsole.log(result.rows[0].theTime);\n\n\t\tclient.end();\n\t} catch(ex) {\n\t\tconsole.error(ex.toString());\n\t}\n});\n```\n\n### Client pooling\n\nThe underlying pooling system is not altered. The companion thunk methods can be used instead. Since PG#Connect\nreturns multiple objects, the return value is an array of those results. They can then be manually destructured\ninto separate variables for cleaner code.\n\n```js\nvar co = require('co'),\n    pg = require('co-pg')(require('pg'));\n\nvar connectionString = 'postgres://postgres:1234@localhost/postgres';\n\nco(function* poolExample() {\n\ttry {\n\t\tvar connectionResults = yield pg.connectPromise(connectionString);\n\t\tvar client = connectionResults[0];\n\t\tvar done = connectionResults[1];\n\n\t\tvar result = yield client.queryPromise('select now() as \"theTime\"');\n\t\t//call `done()` to release the client back to the pool\n\t\tdone();\n\n\t\tconsole.log(result.rows[0].theTime);\n\t} catch(ex) {\n\t\tconsole.error(ex.toString());\n\t}\n});\n```\n\n## Other projects\n\n- [brianc/node-postgres](https://github.com/brianc/node-postgres): the PostgreSQL driver\n- [brianc/node-postgres-pure](https://github.com/brianc/node-postgres-pure): js only PostgreSQL drive\n- [chilts/koa-pg](https://github.com/chilts/koa-pg): koa middleware using co-pg\n\n## License\nMIT\n",
  "readmeFilename": "readme.md",
  "_id": "co-pg@1.3.1",
  "dist": {
    "shasum": "469f90da1002fa2d42015edcf933486801041cd2"
  },
  "_from": "co-pg@",
  "_resolved": "https://registry.npmjs.org/co-pg/-/co-pg-1.3.1.tgz"
}
